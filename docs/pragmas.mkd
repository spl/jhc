{-@Pragmas

Pragmas are special compiler directives that change its behavior in
certain ways. In general, each compiler is free to define its own
pragmas however jhc does try to implement the same ones as other
compilers when it makes sense. pragmas appear in source code as
`{-# PRAGMANAME ... #-}`

All of these pragmas may be prefixed with `JHC_` or the bareword `JHC`
in order to trigger only with JHC. -fignore-pragmas will not ignore
these.

Function Properties
-------------------

These must appear in the same file as the definition of a function. To
apply one to a instance or class method, you must place it in the where
clause of the instance or class declaration. If no function is specified
as in `{-# INLINE #-}` then it will be as if it were declared for every
applicable declaration.

  ----------------------------------------------------------------------
  Function Pragmas    
  ------------------- --------------------------------------------------
  NOINLINE            Do not inline the given function during core
                      transformations. The function *may* be inlined
                      during grin transformations.

  INLINE              Inline this function whenever possible

  SUPERINLINE         Always inline no matter what, even if it means
                      making a local copy of the functions body.

  VCONSTRUCTOR        Treat the function as a virtual constructor. CPR
                      analysis and the worker/wrapper transforms will
                      treat the function application as if it were a
                      constructor. This implies 'NOINLINE'.

  COLD                The function is not in a critical path, this lets
                      the compiler avoid work in the future by
                      pre-computing the final code and including it in
                      the cache at the expense of non-local
                      optimizations involving this function. This can
                      decrease code size and compilation time. It may
                      also set the gcc cold attribute on the generated C
                      code.

  HOT                 The function is in a critical path, optimize
                      heavily at the expense of compilation speed or
                      final code size. This may also set the gcc hot
                      attribute on the generated code.

  NOETA               Do not perform the eta expansion optimization
                      on this function.  `f x = \y -> z` will remain
                      a one argument function through optiminization.
  ----------------------------------------------------------------------

Other Pragmas
-------------

  ----------------------------------------------------------------------
  Class Method Pragmas  
  --------------------- ------------------------------------------------
  NOETA                 By default, jhc eta-expands all class methods to
                        help enable optimizations. This disables this
                        behavior.
  ----------------------------------------------------------------------

  ----------------------------------------------------------------------
  Rules/Specialization 
  -------------------- -------------------------------------------------
  RULES                rewrite rules. These have the same syntax and
                       behave similarly to GHC's rewrite rules, except
                       'phase' information is not allowed.

  CATALYST             A special type of rewrite rule that only fires if
                       it enables the use of another RULE, so a CATALYST
                       may allow optimizations that require passing
                       through a non-optimal intermediate stage.

  SPECIALIZE           create a version of a function that is
                       specialized for a given type

  SUPERSPECIALIZE      has the same effect as SPECIALIZE, but also
                       places a run-time check in the generic version of
                       the function to determine whether to call the
                       specialized version.
  ----------------------------------------------------------------------

Type Pragmas
------------

CTYPE
:   Specify the external type that a data or newtype should use for
    foreign function interfaces. The type must be a newtype or unary
    data constructor of a type that is already foreignable. By not
    including a string, the type is made unFFIable. This can be used to
    preserve abstraction.

    ~~~~ {.haskell}
    data {-# CTYPE "unsigned short" #-} CUShort = CUShort Word16  -- use unsigned short calling convention
    newtype {-# CTYPE #-} Opaque = Opaque Int    -- disable FFI ability for this type
    ~~~~

Header Pragmas
--------------

These pragmas are only valid in the 'head' of a file, meaning they must
come before the initial 'module' definition and in the first 4096 bytes
of the file and must be preceded by and contain only characters in the
ASCII character set.

OPTIONS\_JHC
:   Specify extra options to use when processing this file. The options
    available are equivalent to the command line options, though, not
    all may have meaning when applied to a single file.

    ~~~~ {.haskell}
    {-# OPTIONS_JHC -fno-sugar #-}
    ~~~~

LANGUAGE
:   Specify various language options, options that are not understood
    are ignored. Specifying something here is equivalent to passing it
    as '-X' on the command line.

    ~~~~ {.haskell}
    {-# LANGUAGE NoMonomorphismRestriction, CPP #-}
    ~~~~

Special Pragmas
---------------

LINE pragmas change the logical name of the file that is being parsed,
several preprocessors output these to ensure error messages refer to the
original file. Jhc understands a few variants.

-   `{-# LINE linenumber "filename" #-}` change the current line number
    and filename to the ones given.
-   `{-# LINE linenumber #-}` change the line number to the one given.
-   `{-# LINE default #-}` revert the line number and file name to the
    actual file being read.

In addition, for compatibility with cpp and m4, the following form is
also accepted if it appears at the beginning of a line.

    #line linenumber "filename"?
