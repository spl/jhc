


[int,float,char,ptr]
aaB, ==, Prelude.Eq, ==
# aaB, /=, Prelude.Eq, !=
aaB, >=, Prelude.Ord, >=
aaB, <=, Prelude.Ord, <=
aaB, >, Prelude.Ord, >
aaB, <, Prelude.Ord, <


[int,float]
aaa, +, Prelude.Num, +
aaa, -, Prelude.Num, -
aaa, *, Prelude.Num, *
aa, negate, Prelude.Num, -
# 1, abs, Prelude.Num, abs
# 1, signum, Prelude.Num, abs

[int]
aaa, .&., Data.Bits.Bits, &
aaa, .|., Data.Bits.Bits, |
aaa, xor, Data.Bits.Bits, ^
aa, complement, Data.Bits,Bits, ~
aaa, quot, Prelude.Integral, /
aaa, rem, Prelude.Integral, %
aaa, div, Prelude.Integral, /
aaa, mod, Prelude.Integral, %
aIa, shiftL, Data.Bits.Bits, <<
aIa, shiftR, Data.Bits.Bits, >>


# [float]
# aaa, /, Prelude.Fractional, /

